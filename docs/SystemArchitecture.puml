@startuml
title System Architecture WebSocket with Laravel Integration and Sanctum

top to bottom direction

' Определяем палитру цветов для стрелок
!define COLOR_PAIR1 #4F4F4F
!define COLOR_PAIR2 #4c94e0
!define COLOR_PAIR3 #2E8B57
!define COLOR_PAIR4 #00a693
!define COLOR_PAIR5 #B8860B
!define COLOR_PAIR6 #8B0000
!define COLOR_PAIR7 #006600
!define COLOR_PAIR8 #964b00

' Настройка параметров стрелок для синхронных и асинхронных вызовов
skinparam Arrow {
    Color COLOR_PAIR1
    Thickness 1
    ArrowColor COLOR_PAIR1
}

package "WebSocket System" {
    ' Класс, представляющий команду для управления WebSocket-сервером
    class WebSocketServerCommand {
        + Определяем консольную команду для управления WebSocket сервером
    }

    ' Класс для управления WebSocket-сервером
    class WebSocketServerManager {
        + Управляет запуском, остановкой и перезапуском WebSocket сервера.
    }

    ' IoServer управляет сетевыми соединениями и передает HTTP-запросы
    class IoServer {
        + Создаем WebSocket сервер с помощью фабрики IoServer
    }

    ' HttpServer обрабатывает HTTP-запросы для WebSocket
    class HttpServer {
        + Создает HTTP сервер
    }

    ' Класс WsServer отвечает за маршрутизацию запросов
    class WsServer {
        + Отвечает за обработку WebSocket-соединений в Ratchet
    }

    ' Основной WebSocket-сервер, наследующий интерфейс обработки сообщений
    class WebSocketServer {
        + Обрабатывает WebSocket соединения.
        +onOpen() Метод обработки открытия соединения
        +onMessage() Метод обработки отправки сообщения на сервер
        +onClose() Метод обработки закрытия соединения клиентом
        +onError() Метод обработки ошибок в соединениях
    }

    ' ErrorHandler управляет ошибками и логирует исключения
    class ErrorHandler {
        +handleError() ' Метод для обработки ошибок
    }

    ' RouteHandler определяет, публичный маршрут, приватный или WebSocket канал
    class RouteHandler {
        +handleRequest(route) Основной метод для обработки маршрутов
        +isPublicRoute(route) Проверка на публичный маршрут
        +isPrivateRoute(route) Проверка на приватный маршрут
        +isWebSocketChannel(route) Проверка на маршрут WebSocket-канала
    }

    ' WebSocketRouter маршрутизирует сообщения на нужные каналы
    class WebSocketRouter {
        ' Метод для маршрутизации сообщения к каналу
        +route() Маршрутизация входящих WebSocket-сообщений на основе их типа события.
    }

    ' ClientManager управляет активными клиентами и их соединениями
    class ClientManager {
        +addClient() Добавляет клиента в менеджер
        +removeClient() Удаляет клиента из менеджера
        +getClient() Возвращает объект соединения клиента по его идентификатору
        +getClients() Возвращает всех клиентов
    }

    ' ChannelManager управляет подписками и распределяет сообщения
    class ChannelManager {
        +subscribe() Подписывает клиента на канал
        +unsubscribe() Отписывает клиента от канала
        +broadcast() Отправляет сообщение всем подписчикам канала
    }

    ' Управление общей аутентификацией и авторизацией пользователя на уровне системы
    class Security {
        +authenticate() Аутентификация (authenticate) Проверка пользователя
        (удостоверение его личности через токен Sanctum)
        +authorize() Проверка прав пользователя для доступа к различным частям системы
        (общий доступ, возможно, через роли, разрешения и т.п.).
    }

    ' BroadcastingModule управляет рассылкой сообщений
    class BroadcastingModule {
        ' Рассылка сообщений
        +broadcastMessage()
    }

    ' MonitoringModule мониторит систему и собирает метрики
    class MonitoringModule {
        +logEvents() ' Логирование событий
        +monitorSystem() ' Мониторинг состояния системы
        +collectMetrics() ' Сбор метрик
    }

    ' Логирование исключений
    class ExceptionLogger {
        +logException() ' Логирование исключений
    }

    ' ChannelFactory создает каналы для обмена сообщениями
    class ChannelFactory {
        ' Создание нового канала
        +createChannel()
    }

    ' ChannelRepository управляет данными каналов
    class ChannelRepository {
        ' Управление данными каналов
        +manageChannelData()
    }

    ' RateLimiter ограничивает количество запросов от клиентов
    class RateLimiter {
        ' Ограничение запросов
        +limitRequests()
    }

    ' Обработчики сообщений
    class ChatChannel {
        +authorize() ' Проверка прав на доступ к каналу чата
    }

    class FaqChannel {
        +authorize() ' Проверка прав на доступ к каналу FAQ
    }
}

' Laravel-классы
package "Client applications" {
    ' LaravelApp управляет аутентификацией и взаимодействием с WebSocket
    class LaravelApp {
        ' Аутентификация пользователя
        +authenticateUser()
        ' Ассоциация соединения WebSocket с пользователем
        +associateWebSocketConnection()
        ' Отправка сообщений пользователю
        +sendMessageToUser()
    }

    ' Таблица с данными о пользователях
    class UserTable {
        +userData() ' Данные пользователя
    }

    ' SanctumToken содержит данные о токенах аутентификации
    class SanctumToken {
        +token
        +expiration
        +userId
    }

    ' Очередь для асинхронных задач
    class Queue {
        +handleAsyncTasks() ' Управление асинхронными задачами
    }

    ' Redis используется для кэширования данных и межпроцессного взаимодействия
    class Redis {
        ' Кэширование данных
        +cacheData()
        ' Межпроцессное взаимодействие
        +handleInterProcessCommunication()
    }
}

package "Admin Panel" {
    ' Панель администратора для взаимодействия с пользователями
    class AdminPanel {
        +authenticate() ' Аутентификация администратора
        +sendMessageToUser() ' Отправка сообщений пользователям
        +receiveMessages() ' Получение сообщений от пользователей
    }
}

package "iOS-приложение" {
    ' iOS-приложение для взаимодействия с WebSocket
    class IOS {
        +sendMessage() ' Отправка сообщений
        +receiveMessage() ' Получение сообщений
        +authenticate() ' Аутентификация пользователя
    }
}

package "Android-приложение" {
    ' Android-приложение для взаимодействия с WebSocket
    class AndroidApp {
        +sendMessage() ' Отправка сообщений
        +receiveMessage() ' Получение сообщений
        +authenticate() ' Аутентификация пользователя
    }
}

package "Security Module" {
    class SecurityModule {
        +Модуль авторизации / регистрации по токену
    }
}

' Связи между объектами
WsServer -> WebSocketServer
AndroidApp -> WebSocketServer
AdminPanel -> WebSocketServer
IOS -> WebSocketServer
WebSocketServer --> RouteHandler : Проверка маршрута
WebSocketServer --> ErrorHandler
RouteHandler --> ClientManager : Публичный маршрут
RouteHandler --> Security : Приватный маршрут
Security --> ClientManager : Прошел проверку
Security --> SecurityModule : Запрос в модуль
SecurityModule --> LaravelApp
SecurityModule --> Security : Ответ модуля
MonitoringModule --> Redis
BroadcastingModule -[dashed]-> Queue
AndroidApp --> LaravelApp : Получение токена
IOS --> LaravelApp : Получение токена
LaravelApp --> UserTable
LaravelApp --> Redis
LaravelApp --> SanctumToken
Queue -[dashed]-> Redis
AdminPanel --> LaravelApp : Получение токена
HttpServer -> WsServer
IoServer -> HttpServer
WebSocketServerManager -> IoServer
WebSocketServerCommand -> WebSocketServerManager
ChannelManager --> BroadcastingModule
ChannelManager --> MonitoringModule
ChannelManager --> RateLimiter
ChannelManager --> Redis
ChannelManager --> ChannelFactory
ChannelManager --> ErrorHandler
ChannelManager --> ChannelRepository
ClientManager --> ErrorHandler
ClientManager --> WebSocketRouter
WebSocketRouter --> ChannelManager
ChannelManager --> ChatChannel
ChannelManager --> FaqChannel
ErrorHandler --> ExceptionLogger

@enduml
